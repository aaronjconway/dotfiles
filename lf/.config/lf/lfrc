# vim:ft=bash
set shellopts '-eu'
set ifs "\n"

set color256
set icons
set hidden
set incsearch
set incfilter
set scrolloff 4
set tabstop 2
set smartcase
set dircounts
set info size
set sortby natural
set ratios '1:2:3'
set timefmt '2006-01-02 15:04:05 -0700'
set previewer ~/.config/lf/preview.sh

# --------------------------
# keyboard mappings
# --------------------------

# open
map <enter> open
map D trash
map . :filter

# create directory/file
map ad push $mkdir<space>
map af push $touch<space>

# Quickly locate a file with fzf and select it in lf
map gf $lf -remote "send $id select $(fdfind . $(find_root_dir) | fzf)"

# map <esc> unselect; clear

map sn :{{ set sortby natural; set info size; set preview; }}
map ss :{{ set sortby size; set info size; set preview; }}
map st :{{ set sortby time; set info time; set preview; }}

# show documentation
map g? $lf -doc | less

# beyond compare selected files/directories
map = &bcompare $fx

# commands
# ---

cmd mkdir %[ -n "${1}" ] && mkdir -p ${@} || echo "Argument needed"
cmd mkfile %[ -n "${1}" ] && touch ${@} || echo "Argument needed"

# Implement trash command
cmd trash ${{
		rm -rf $fx
}}

# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}



cmd open ${{
	case $(file --dereference --mime-type $f -b) in
		inode/x-empty) $EDITOR $fx ;;
		text/*) $EDITOR $fx;;
		*/json) $EDITOR $fx;;
		application/*) wslview $fx > /dev/null & ;;
		video/*) wslview $fx > /dev/null & ;;
		audio/*) wslview $fx > /dev/null & ;;
		image/*) wslview $fx > /dev/null & ;;
		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
	esac
}}

# replace paste command with rsync and progress display
# cmd paste &{{
# 	load=$(lf -remote 'load')
# 	mode=$(echo "$load" | sed -n '1p')
# 	list=$(echo "$load" | sed '1d')
# 	if [ $mode = 'copy' ]; then
# 		rsync -avh --ignore-existing --progress $list . \
# 			| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
# 			| while read line; do
# 				echo "$line"
# 				lf -remote "send $id echo $line"
# 			done
# 	elif [ $mode = 'move' ]; then
# 		mv -i $list .
# 	fi
# 	lf -remote 'send load'
# 	lf -remote 'send clear'
# }}

# quickly cd into frecent directories using zoxide, zlua or rupa/z
cmd z ${{
	set +u
	dest=''
	prefix=''
	[[ "$OSTYPE" == "darwin"* ]] && prefix='/usr/local'
	if hash zoxide 2>/dev/null; then
		dest="$(zoxide query "$@")"
	# See: https://github.com/skywind3000/z.lua
	elif [ -f "$prefix/etc/profile.d/z.lua" ]; then
		export _ZL_NO_PROMPT_COMMAND=1
		dest="$(lua "$prefix/etc/profile.d/z.lua" -e "$@")"
	# See https://github.com/rupa/z
	elif [ -f "$prefix/etc/profile.d/z.sh" ] || [ -f "$prefix/share/z/z.sh"]; then
		export _Z_NO_PROMPT_COMMAND=1
		source "$prefix/etc/profile.d/z.sh" || source "$prefix/share/z/z.sh"
		dest="$(_z "$@" && pwd)"
	fi

	if test -n "${dest}"; then
		lf -remote "send $id cd '${dest}'"
	else
		lf -remote "send $id echo 'Invalid directory ${dest}'"
	fi
}}

cmd fzf_z ${{
	sel="$(zoxide query -l | fzf +s)"
	[ -d "$sel" ] && lf -remote "send $id cd \"$sel\""
}}

# dynamically set info displayed based on the number of columns
cmd resize %{{
	w=$(tmux display-message -p '#{pane_width}' || tput cols)
	# w=$(tput cols)
	if [ $w -le 62 ]; then
		lf -remote "send $id set ratios 1:4"
		lf -remote "send $id set nopreview"
	elif [ $w -le 80 ]; then
		lf -remote "send $id set ratios 1:2:2"
	elif [ $w -le 100 ]; then
		lf -remote "send $id set ratios 1:2:3"
	else
		lf -remote "send $id set ratios 2:4:5"
	fi
	# lf -remote "send $id echo 'ui adjusted for width of $w'"
}}
resize

#  vim: set ts=2 sw=2 tw=80 noet :
